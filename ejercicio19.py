# -*- coding: utf-8 -*-
"""Ejercicio19

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xAEBIQtxTDPB1H7R1kOQpCuAPnmT6eAY
"""

# 📚 Librerías
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import adfuller, kpss
from google.colab import files
import re

# 🔼 Subir archivo .txt
uploaded = files.upload()
filename = list(uploaded.keys())[0]

# 📄 Leer y limpiar archivo
with open(filename, "r") as file:
    lines = file.readlines()

data_lines = [line.strip() for line in lines if re.match(r'^\d{4}:\d{2}', line)]

records = []
for line in data_lines:
    parts = re.split(r'\s+', line)
    if len(parts) >= 3:
        date_str = parts[0]
        gs3m = float(parts[1])
        gs6m = float(parts[2])
        records.append([date_str, gs3m, gs6m])

df = pd.DataFrame(records, columns=["Date", "GS3M", "GS6M"])
df["Date"] = pd.to_datetime(df["Date"], format="%Y:%m")
df.set_index("Date", inplace=True)

# 📊 Graficar ambas series
plt.figure(figsize=(12, 5))
plt.plot(df["GS3M"], label="Tasa 3 meses (GS3M)", linewidth=2)
plt.plot(df["GS6M"], label="Tasa 6 meses (GS6M)", linewidth=2)
plt.title("Tasas de Bonos del Tesoro: 3 vs 6 meses")
plt.xlabel("Fecha")
plt.ylabel("Tasa (%)")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# 📉 Función para pruebas de estacionariedad
def test_stationarity(series, name="Serie"):
    print(f"🔍 Resultados para {name}:")
    adf_result = adfuller(series)
    print(f"ADF p-value: {adf_result[1]:.4f} → {'Estacionaria' if adf_result[1] < 0.05 else 'No estacionaria'}")
    kpss_result = kpss(series, regression='c', nlags="auto")
    print(f"KPSS p-value: {kpss_result[1]:.4f} → {'Estacionaria' if kpss_result[1] >= 0.05 else 'No estacionaria'}")
    print("-" * 60)

# ✅ Aplicar pruebas a ambas series
test_stationarity(df["GS3M"], "GS3M (Tasa 3 meses)")
test_stationarity(df["GS6M"], "GS6M (Tasa 6 meses)")

# 📉 Diferenciar las series
df["GS3M_diff"] = df["GS3M"].diff()
df["GS6M_diff"] = df["GS6M"].diff()

# 🧪 Volver a probar estacionariedad sobre las series diferenciadas
print("🔁 Serie diferenciada: GS3M (3 meses)")
test_stationarity(df["GS3M_diff"].dropna(), "GS3M_diff (Primera diferencia)")

print("\n🔁 Serie diferenciada: GS6M (6 meses)")
test_stationarity(df["GS6M_diff"].dropna(), "GS6M_diff (Primera diferencia)")

# 📦 Importar prueba de cointegración de Johansen
from statsmodels.tsa.vector_ar.vecm import coint_johansen

# 📋 Crear dataframe con ambas series (nivel, no diferencias)
df_coint = df[["GS3M", "GS6M"]].dropna()

# 🧪 Prueba de cointegración de Johansen (con tendencia y 1 lag mínimo)
result = coint_johansen(df_coint, det_order=0, k_ar_diff=1)

# 📈 Mostrar estadísticos de traza y valores críticos
print("🔍 Estadísticos de traza de Johansen:")
for i, trace in enumerate(result.lr1):
    print(f"Rango ≤ {i}: estadístico = {trace:.4f}, crítico (5%) = {result.cvt[i, 1]:.4f} → {'✔️ Cointegrado' if trace > result.cvt[i, 1] else '❌ No'}")

from statsmodels.tsa.vector_ar.vecm import VECM

# 🧪 Crear dataframe con series en niveles (cointegradas)
df_coint = df[["GS3M", "GS6M"]].dropna()

# 🔢 Ajustar modelo VECM con 4 rezagos (k_ar_diff=3 → 4 niveles porque VECM usa d+1)
vecm_model = VECM(df_coint, k_ar_diff=3, coint_rank=1, deterministic="co")
vecm_result = vecm_model.fit()

# 📋 Resumen del modelo
print(vecm_result.summary())